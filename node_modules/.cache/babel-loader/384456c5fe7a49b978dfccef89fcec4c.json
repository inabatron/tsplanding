{"ast":null,"code":"var _jsxFileName = \"/Users/inabat/Documents/projects/software-engineering/densysme-frontend/src/components/list/records-list.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport classes from \"./styles.module.css\";\nimport PrintIcon from '@mui/icons-material/Print';\nimport { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from \"@mui/material\";\nimport ReactToPrint from \"react-to-print\";\nimport { TreatmentApi } from \"../../client/backend-api/treatment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RecordsOfAllDocs = () => {\n  _s();\n  let componentref = useRef();\n  const [records, setRecords] = useState([]); //change to []\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const fetchHistory = async () => {\n    // !! UNCOMMENT!!\n    const records = await TreatmentApi.getAllMedRecords();\n    setRecords(records);\n  };\n  useEffect(() => {\n    fetchHistory().catch(console.error);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.pageHeader} ${classes.mb2} `,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: \" Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactToPrint, {\n        trigger: () => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            variant: \"outlined\",\n            endIcon: /*#__PURE__*/_jsxDEV(PrintIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 38\n            }, this),\n            children: \"Print\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 32\n          }, this);\n        },\n        content: () => componentref,\n        documentTitle: \"my history\",\n        pageStyle: \"print\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), records.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: el => componentref = el,\n        className: classes.tableContainer,\n        children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            stickyHeader: true,\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Doctor\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Patient\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: \"Medication\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: (rowsPerPage > 0 ? records.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : records).map(record => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: record.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: record.doctorName + ' ' + record.doctorSurname\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: record.userName + \" \" + record.userSurname\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"center\",\n                  children: record.treat\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 45\n                }, this)]\n              }, record.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n          onRowsPerPageChange: e => {\n            setRowsPerPage(parseInt(e.target.value, 10));\n            setPage(0);\n          },\n          component: \"div\",\n          count: records.length,\n          rowsPerPage: rowsPerPage,\n          page: page,\n          onPageChange: (e, newPage) => setPage(newPage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"No records found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(RecordsOfAllDocs, \"HhM5fELwBT8mfn2neLvmEu2Behw=\");\n_c = RecordsOfAllDocs;\nvar _c;\n$RefreshReg$(_c, \"RecordsOfAllDocs\");","map":{"version":3,"names":["useEffect","useRef","useState","classes","PrintIcon","Button","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Typography","ReactToPrint","TreatmentApi","RecordsOfAllDocs","componentref","records","setRecords","page","setPage","rowsPerPage","setRowsPerPage","fetchHistory","getAllMedRecords","catch","console","error","pageHeader","mb2","length","el","tableContainer","slice","map","record","date","doctorName","doctorSurname","userName","userSurname","treat","id","e","parseInt","target","value","newPage"],"sources":["/Users/inabat/Documents/projects/software-engineering/densysme-frontend/src/components/list/records-list.js"],"sourcesContent":["import {useEffect, useRef, useState} from \"react\";\nimport classes from \"./styles.module.css\";\nimport PrintIcon from '@mui/icons-material/Print';\nimport {\n    Button,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    Typography\n} from \"@mui/material\";\nimport ReactToPrint from \"react-to-print\";\nimport { TreatmentApi } from \"../../client/backend-api/treatment\";\n\nexport const RecordsOfAllDocs = () => {\n    let componentref = useRef()\n    const [records, setRecords] = useState([])       //change to []\n    const [page, setPage] = useState(0)\n    const [rowsPerPage, setRowsPerPage] = useState(10)\n\n    const fetchHistory = async () => {\n        // !! UNCOMMENT!!\n        const records = await TreatmentApi.getAllMedRecords()\n        setRecords(records)\n    }\n\n\n    useEffect(() => {\n        fetchHistory().catch(console.error)\n    }, [])\n\n    return(\n        <>\n            <div className={`${classes.pageHeader} ${classes.mb2} `}>\n                <Typography variant=\"h5\" > Records</Typography>\n                <ReactToPrint\n                    trigger={()=>{\n                        return <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            endIcon={<PrintIcon/>}>\n                            Print\n                        </Button>\n                    }}\n                    content={()=>\n                        componentref\n                    }\n                    documentTitle=\"my history\"\n                    pageStyle=\"print\"\n\n                >\n\n                </ReactToPrint>\n            </div>\n            {records.length > 0 ? (\n                <>\n                    <div ref={el=>(componentref = el)} className={classes.tableContainer}>\n                        <TableContainer component={Paper}>\n                            <Table stickyHeader>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Date</TableCell>\n                                        <TableCell align=\"center\">Doctor</TableCell>\n                                        <TableCell align=\"center\">Patient</TableCell>\n                                        <TableCell align=\"center\">Medication</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {(rowsPerPage > 0\n                                            ? records.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            : records\n                                    ).map((record) => (\n                                        <TableRow key={record.id}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {record.date}\n                                            </TableCell>\n                                            <TableCell align=\"center\">{record.doctorName + ' ' + record.doctorSurname}</TableCell>\n                                            <TableCell align=\"center\">{record.userName + \" \" +  record.userSurname}</TableCell>\n                                            <TableCell align=\"center\">{record.treat}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                        <TablePagination\n                            onRowsPerPageChange={(e) => {\n                                setRowsPerPage(parseInt(e.target.value, 10))\n                                setPage(0)\n                            }}\n                            component=\"div\"\n                            count={records.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onPageChange={(e, newPage) => setPage(newPage)}\n                        />\n                    </div>\n                </>\n            ) : (\n                <Typography variant=\"h5\">No records found!</Typography>\n            )}\n\n        </>\n\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}